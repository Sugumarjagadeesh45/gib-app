import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ActivityIndicator,
  Alert,
  FlatList,
  Image,
  TouchableOpacity,
  Modal,
  TextInput,
  ScrollView,
  PermissionsAndroid,
  Platform,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { launchImageLibrary } from 'react-native-image-picker';
import MaterialIcons from 'react-native-vector-icons/MaterialIcons';
import Entypo from 'react-native-vector-icons/Entypo';
import UserScore from '../components/UserScore';
import EditProfileModal from '../components/EditProfileModal';
import ThanksnoteHistory from '../components/ThanksnoteHistory';

const ProfileScreen = () => {
  const [userPhone, setUserPhone] = useState<string | null>(null);
  const [userData, setUserData] = useState<any>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [imageUri, setImageUri] = useState<string | null>(null);

  const [modalVisible, setModalVisible] = useState(false);
  const [passwordModalVisible, setPasswordModalVisible] = useState(false);
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [isPasswordVisible, setIsPasswordVisible] = useState(false);
  const [selectedTab, setSelectedTab] = useState<'Personal' | 'Business'>('Personal');

  useEffect(() => {
    let interval: NodeJS.Timeout;

    const fetchUserPhone = async () => {
      try {
        const phone = await AsyncStorage.getItem('phone');
        if (phone) {
          setUserPhone(phone);
          fetchUserData(phone);
          interval = setInterval(() => fetchUserData(phone), 5000);
        } else {
          setError('Phone number not found in storage.');
          setLoading(false);
        }
      } catch (err) {
        setError('Failed to retrieve phone number.');
        setLoading(false);
      }
    };

    if (Platform.OS === 'android') {
      PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE);
    }

    fetchUserPhone();

    return () => {
      if (interval) clearInterval(interval);
    };
  }, []);

  const fetchUserData = async (phone: string) => {
    try {
      const response = await fetch('https://www.giberode.com/giberode_app/selected_data.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ phone }),
      });
      const data = await response.json();
      if (data.success) {
        setUserData(data.user);
        setImageUri(data.user.profile_image);
        await AsyncStorage.setItem('profile_image', data.user.profile_image);
      } else {
        setError(data.message || 'User not found.');
      }
    } catch {
      setError('Network error. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const pickImage = async () => {
    launchImageLibrary({ mediaType: 'photo' }, async (response) => {
      if (response.didCancel) return;
      if (response.errorCode) {
        Alert.alert('Error', response.errorMessage || 'Image picker error');
        return;
      }

      const uri = response.assets?.[0]?.uri;
      if (uri) uploadImage(uri);
    });
  };

  const uploadImage = async (uri: string) => {
    if (!userPhone) {
      Alert.alert('Error', 'User phone number is missing.');
      return;
    }

    const formData = new FormData();
    formData.append('phone', userPhone);
    formData.append('profile_image', {
      uri,
      name: `profile_${userPhone}.jpg`,
      type: 'image/jpeg',
    } as any);

    try {
      const response = await fetch('https://www.giberode.com/giberode_app/upload_image.php', {
        method: 'POST',
        body: formData,
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      const data = await response.json();

      if (data.status === 'success') {
        Alert.alert('Success', 'Profile picture updated successfully!');
        setImageUri(data.image_url);
        await AsyncStorage.setItem('profile_image', data.image_url);
      } else {
        Alert.alert('Error', 'Failed to update profile picture.');
      }
    } catch {
      Alert.alert('Error', 'Network error. Please try again.');
    }
  };

  const updatePassword = async () => {
    if (!newPassword || !confirmPassword) {
      Alert.alert('Error', 'Please fill in both fields.');
      return;
    }

    if (newPassword !== confirmPassword) {
      Alert.alert('Error', 'Passwords do not match.');
      return;
    }

    try {
      const response = await fetch('https://www.giberode.com/giberode_app/changepassword.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ phone: userPhone, new_password: newPassword }),
      });

      const data = await response.json();
      if (data.status === 'success') {
        Alert.alert('Success', 'Password updated successfully!');
        setPasswordModalVisible(false);
        setNewPassword('');
        setConfirmPassword('');
      } else {
        Alert.alert('Error', data.message || 'Failed to update password.');
      }
    } catch {
      Alert.alert('Error', 'Network error. Please try again.');
    }
  };

  const personalInfo = userData
    ? [
        { label: 'Name', value: userData.name, icon: 'person' },
        { label: 'Phone', value: userData.phone, icon: 'phone' },
        { label: 'Date of Birth', value: userData.date_birth, icon: 'cake' },
        { label: 'Blood Group', value: userData.blood_group, icon: 'favorite' },
      ]
    : [];

  const businessInfo = userData
    ? [
        { label: 'Business Name', value: userData.business_name, icon: 'business' },
        { label: 'Team Name', value: userData.team_name, icon: 'group' },
        { label: 'Business Nature', value: userData.business_nature, icon: 'work' },
        { label: 'Company Address', value: userData.company_address, icon: 'location-on' },
      ]
    : [];

  if (loading) {
    return <ActivityIndicator size="large" color="#007bff" style={styles.loader} />;
  }

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <TouchableOpacity onPress={pickImage}>
        <Image
          source={imageUri ? { uri: imageUri } : require('../assets/icon.png')}
          style={styles.profileImage}
        />
        <View style={styles.editIcon}>
          <Entypo name="edit" size={20} color="#fff" />
        </View>
      </TouchableOpacity>

      <View style={styles.scoreSection}>
        <UserScore />
        <TouchableOpacity style={styles.editBtnSmall} onPress={() => setModalVisible(true)}>
          <Text style={styles.editBtnText}>Edit</Text>
        </TouchableOpacity>
      </View>

      <View style={styles.tabs}>
        {['Personal', 'Business'].map((tab) => (
          <TouchableOpacity
            key={tab}
            style={[styles.tabBtn, selectedTab === tab && styles.tabBtnActive]}
            onPress={() => setSelectedTab(tab as 'Personal' | 'Business')}
          >
            <Text style={[styles.tabText, selectedTab === tab && styles.tabTextActive]}>{tab}</Text>
          </TouchableOpacity>
        ))}
      </View>

      {(selectedTab === 'Personal' ? personalInfo : businessInfo).map((item) => (
        <View key={item.label} style={styles.row}>
          <View style={{ flexDirection: 'row', alignItems: 'center' }}>
            <MaterialIcons name={item.icon} size={20} color="#c2c2c2" style={{ marginRight: 8 }} />
            <Text style={styles.label}>{item.label}</Text>
          </View>
          <Text style={styles.value}>{item.value || '-'}</Text>
        </View>
      ))}

      {/* <TouchableOpacity style={styles.changePasswordBtn} onPress={() => setPasswordModalVisible(true)}>
        <Text style={styles.changePasswordText}>Change Password</Text>
      </TouchableOpacity> */}

      <Modal visible={passwordModalVisible} animationType="slide" transparent>
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Change Password</Text>
            <TextInput
              secureTextEntry={!isPasswordVisible}
              placeholder="New Password"
              value={newPassword}
              onChangeText={setNewPassword}
              style={styles.input}
            />
            <TextInput
              secureTextEntry={!isPasswordVisible}
              placeholder="Confirm Password"
              value={confirmPassword}
              onChangeText={setConfirmPassword}
              style={styles.input}
            />
            <TouchableOpacity onPress={() => setIsPasswordVisible(!isPasswordVisible)} style={styles.togglePassword}>
              <MaterialIcons name={isPasswordVisible ? 'visibility-off' : 'visibility'} size={20} color="gray" />
              <Text style={{ color: 'gray', marginLeft: 8 }}>
                {isPasswordVisible ? 'Hide' : 'Show'} Password
              </Text>
            </TouchableOpacity>
            <View style={styles.modalButtons}>
              <TouchableOpacity style={styles.modalBtn} onPress={updatePassword}>
                <Text style={styles.modalBtnText}>Update</Text>
              </TouchableOpacity>
              <TouchableOpacity style={[styles.modalBtn, styles.cancelBtn]} onPress={() => setPasswordModalVisible(false)}>
                <Text style={styles.modalBtnText}>Cancel</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      <EditProfileModal visible={modalVisible} onClose={() => setModalVisible(false)} />



        
    </ScrollView>
  );
};