import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Alert,
  Image,
  ScrollView,
  ActivityIndicator,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useNavigation, NavigationProp } from '@react-navigation/native';
import { RootStackParamList } from '../../App';

const Login = () => {
  const navigation = useNavigation<NavigationProp<RootStackParamList>>();

  const [initializing, setInitializing] = useState(true);
  const [phone, setPhone] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const checkLogin = async () => {
      const storedPhone = await AsyncStorage.getItem('phone');
      if (storedPhone) {
        navigation.reset({ index: 0, routes: [{ name: 'MainApp' }] });
      } else {
        setInitializing(false);
      }
    };
    checkLogin();
  }, []);

  const handleLogin = async () => {
    if (!phone || !password) {
      Alert.alert('Error', 'Please enter both phone and password');
      return;
    }

    setLoading(true);

    try {
      const response = await fetch('https://www.giberode.com/giberode_app/login.php', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ phone, password }),
      });

      const data = await response.json();

      if (data.status === 'success' && data.user) {
        const { name, phone, profile_image } = data.user;

        if (name && phone && profile_image) {
          await AsyncStorage.setItem('phone', phone);
          await AsyncStorage.setItem('name', name);
          await AsyncStorage.setItem('profile_image', profile_image);

          navigation.reset({ index: 0, routes: [{ name: 'MainApp' }] });
        } else {
          Alert.alert('Error', 'Incomplete user data received');
        }
      } else {
        Alert.alert('Login Failed', data.message || 'Invalid credentials');
      }
    } catch (error) {
      console.error(error);
      Alert.alert('Error', 'Something went wrong. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  if (initializing) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#4E9F3D" />
      </View>
    );
  }

  return (
    <KeyboardAvoidingView
      style={{ flex: 1 }}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      <ScrollView contentContainerStyle={styles.scrollContainer}>
        <View style={styles.container}>
          <View style={styles.header}>
            <Image source={require('../assets/icon.png')} style={styles.logo} />
            <Text style={styles.welcomeText}>Gounders In Business</Text>
            <Text style={styles.tagline}>
              ‡Æâ‡Æ±‡Æµ‡ØÅ‡Æï‡Æ≥‡Øà ‡Æµ‡Æ≥‡Æ∞‡Øç‡Æ™‡Øã‡ÆÆ‡Øç!{'\n'}‡Æï‡Æ≤‡Ææ‡Æö‡Øç‡Æö‡Ææ‡Æ∞‡Æ§‡Øç‡Æ§‡Øà ‡ÆÆ‡ØÄ‡Æü‡Øç‡Æü‡ØÜ‡Æü‡ØÅ‡Æ™‡Øç‡Æ™‡Øã‡ÆÆ‡Øç!!
            </Text>
          </View>

          <TextInput
            style={styles.input}
            placeholder="Phone Number"
            keyboardType="phone-pad"
            maxLength={10}
            onChangeText={setPhone}
            value={phone}
          />

          <View style={styles.passwordContainer}>
            <TextInput
              style={styles.passwordInput}
              placeholder="Password"
              secureTextEntry={!showPassword}
              onChangeText={setPassword}
              value={password}
            />
            <TouchableOpacity onPress={() => setShowPassword(!showPassword)} style={styles.eyeIcon}>
              <Text>{showPassword ? 'üôà' : 'üëÅÔ∏è'}</Text>
            </TouchableOpacity>
          </View>

          <TouchableOpacity
            style={[styles.button, loading && { opacity: 0.6 }]}
            onPress={handleLogin}
            disabled={loading}
          >
            {loading ? (
              <ActivityIndicator color="#fff" />
            ) : (
              <Text style={styles.buttonText}>LOGIN</Text>
            )}
          </TouchableOpacity>
        </View>
      </ScrollView>
    </KeyboardAvoidingView>
  );
};

const styles = StyleSheet.create({
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  scrollContainer: {
    flexGrow: 1,
    justifyContent: 'center',
    paddingHorizontal: 20,
  },
  container: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 10,
    elevation: 5,
  },
  header: {
    alignItems: 'center',
    marginBottom: 20,
  },
  logo: {
    width: 100,
    height: 100,
    marginBottom: 10,
  },
  welcomeText: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  tagline: {
    textAlign: 'center',
    marginTop: 5,
    color: '#666',
  },
  input: {
    borderBottomWidth: 1,
    marginBottom: 15,
    paddingVertical: 8,
    fontSize: 16,
  },
  passwordContainer: {
    flexDirection: 'row',
    borderBottomWidth: 1,
    alignItems: 'center',
    marginBottom: 20,
  },
  passwordInput: {
    flex: 1,
    paddingVertical: 8,
    fontSize: 16,
  },
  eyeIcon: {
    padding: 8,
  },
  button: {
    backgroundColor: '#4E9F3D',
    padding: 15,
    borderRadius: 8,
    alignItems: 'center',
  },
  buttonText: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: 16,
  },
});

export default Login;
